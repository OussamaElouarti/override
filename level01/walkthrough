# level01 walkthrough
#

The binary is implementing a username and password check, it reads from stdin two times the user then the pass

The read for user is done through reading into a buffer in the data segment (0x804a040) i.e global char array named a_user_name

In the read for the password it reads into a local char array with addr (esp+0x1c) and size 0x10, the full length of 0x64, this is a stack overflow vulnerability, we can overide the return addr of the <main> stack frame.

The binary doesn't contain code running system("/bin/sh") hence we need to inject shellcode.

First we will need to know the distance between (esp+0x1c) begining of our vulnerable buffer and ebp+0x4 the location of the return address.
This can easily be done with gdb. The distance is 80.

We will inject the shellcode right after the username, the address we should jump to is a_user_name+7,

python -c "print 'dat_wil'+'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'+(0x100-7-25)*'a' +79*'a'+'\x47\xa0\x04\x08'"